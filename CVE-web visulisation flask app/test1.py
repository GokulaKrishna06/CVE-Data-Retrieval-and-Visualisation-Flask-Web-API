from flask import Flask, redirect, render_template, request, jsonify
import json

app = Flask(__name__)

# Load the CVE data from the JSON file
with open('cve.json') as f:
    cve_data = json.load(f)

def paginate_data(data, page, per_page):
    start_index = (page - 1) * per_page
    end_index = start_index + per_page
    return data[start_index:end_index]

@app.route('/cves/list')
def cve_list():
    # Get query parameters
    page = int(request.args.get('page', 1))
    per_page = int(request.args.get('per_page', 10))
    sort_by = request.args.get('sort_by', 'published')

    # Sort CVE data by the specified field
    cve_data_sorted = sorted(cve_data['vulnerabilities'], key=lambda x: x['cve'][sort_by])

    # Perform server-side sorting for dates
    if sort_by in ['published', 'lastModified']:
        cve_data_sorted = sorted(cve_data_sorted, key=lambda x: x['cve'][sort_by], reverse=True)

    # Perform pagination
    cves_paginated = paginate_data(cve_data_sorted, page, per_page)
    total_records = len(cve_data_sorted)
    total_pages = total_records // per_page
    return render_template('scroll.html', cves=cves_paginated, total_records=total_records, per_page=per_page,total_pages=total_pages)

@app.route('/cves/<cve_id>')
def cve_details(cve_id):
    # Find the CVE details by ID
    cve_details = next((cve for cve in cve_data['vulnerabilities'] if cve['cve']['id'] == cve_id), None)
    if cve_details:
        # Check if 'configurations' data exists
        if 'configurations' in cve_details['cve']:
            # Fetch 'configurations' data
            configurations_data = cve_details['cve']['configurations']
        else:
            configurations_data = None

        return render_template('test1.html', cve=cve_details, configurations=configurations_data)
    else:
        return "CVE not found", 404

@app.route('/')
def index():
    return redirect('/cves/list')

if __name__ == '__main__':
    app.run(debug=True)
