from flask import Flask, redirect, render_template, request
import sqlite3
import json
import threading
import time

app = Flask(__name__)

# Creating SQLite database and table
conn = sqlite3.connect('test_db.sqlite3')
cur = conn.cursor()
cur.execute('''CREATE TABLE IF NOT EXISTS cve_data (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                cve_id TEXT,
                sourceIdentifier TEXT,
                published TEXT,
                lastModified TEXT,
                vulnStatus TEXT,
                description TEXT,
                severity TEXT,
                score TEXT,
                vectorString TEXT,
                accessVector TEXT,
                accessComplexity TEXT,
                authentication TEXT,
                confidentialityImpact TEXT,
                integrityImpact TEXT,
                availabilityImpact TEXT,
                exploitabilityScore TEXT,
                impactScore TEXT,
                configurations TEXT
            )''')
conn.commit()
conn.close()

# Part-1: Loading CVE data and synchronizing with SQLite database
def synchronize_cve_data():
    while True:
        with open('cve.json') as f:
            cve_data = json.load(f)['vulnerabilities']
        
        conn = sqlite3.connect('test_db.sqlite3')
        cur = conn.cursor()
        cur.execute("DELETE FROM cve_data")
        
        for cve in cve_data:
            cur.execute('''INSERT INTO cve_data (
                            cve_id, sourceIdentifier, published, lastModified, vulnStatus,
                            description, severity, score, vectorString, accessVector,
                            accessComplexity, authentication, confidentialityImpact,
                            integrityImpact, availabilityImpact, exploitabilityScore,
                            impactScore, configurations
                        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)''',
                        (cve['cve']['id'], cve['cve']['sourceIdentifier'], cve['cve']['published'],
                         cve['cve']['lastModified'], cve['cve']['vulnStatus'], cve['cve']['descriptions'][0]['value'],
                         cve['cve']['metrics']['cvssMetricV2'][0]['baseSeverity'], cve['cve']['metrics']['cvssMetricV2'][0]['cvssData']['baseScore'],
                         cve['cve']['metrics']['cvssMetricV2'][0]['cvssData']['vectorString'], cve['cve']['metrics']['cvssMetricV2'][0]['cvssData']['accessVector'],
                         cve['cve']['metrics']['cvssMetricV2'][0]['cvssData']['accessComplexity'], cve['cve']['metrics']['cvssMetricV2'][0]['cvssData']['authentication'],
                         cve['cve']['metrics']['cvssMetricV2'][0]['cvssData']['confidentialityImpact'], cve['cve']['metrics']['cvssMetricV2'][0]['cvssData']['integrityImpact'],
                         cve['cve']['metrics']['cvssMetricV2'][0]['cvssData']['availabilityImpact'], cve['cve']['metrics']['cvssMetricV2'][0]['exploitabilityScore'],
                         cve['cve']['metrics']['cvssMetricV2'][0]['impactScore'], json.dumps(cve['cve']['configurations'])))
        
        conn.commit()
        conn.close()
        time.sleep(86400)  # Sleep for 24 hours (86400 seconds)

# Starting a thread for data synchronization
sync_thread = threading.Thread(target=synchronize_cve_data)
sync_thread.daemon = True
sync_thread.start()

# Part-2: Pagination function and route for CVE list
@app.route('/cves/list')
def cve_list():
    page = int(request.args.get('page', 1))
    per_page = int(request.args.get('per_page', 10))
    sort_by = request.args.get('sort_by', 'published')

    conn = sqlite3.connect('test_db.sqlite3')
    cur = conn.cursor()
    cur.execute("SELECT * FROM cve_data ORDER BY {} DESC".format(sort_by))
    cve_data_sorted = cur.fetchall()
    conn.close()

    total_records = len(cve_data_sorted)
    total_pages = total_records // per_page
    cves_paginated = cve_data_sorted[(page - 1) * per_page: page * per_page]

    return render_template('cve_list.html', cves=cves_paginated, total_records=total_records, per_page=per_page, total_pages=total_pages)

# Part-3: Route for CVE details
@app.route('/cves/<cve_id>')
def cve_details(cve_id):
    conn = sqlite3.connect('test_db.sqlite3')
    cur = conn.cursor()
    cur.execute("SELECT * FROM cve_data WHERE cve_id=?", (cve_id,))
    cve_details = cur.fetchone()
    conn.close()

    if cve_details:
        configurations_data = json.loads(cve_details[17]) if cve_details[17] else None
        return render_template('cve_details.html', cve=cve_details, configurations=configurations_data)
    else:
        return "CVE not found", 404

# Part-4: Redirect to CVE list by default
@app.route('/')
def index():
    return redirect('/cves/list')

# Execution
if __name__ == '__main__':
    app.run(debug=True)
