from flask import Flask, redirect, render_template, request, jsonify
import json
import threading
import time
app = Flask(__name__)

#part-1 CVE_List for first page

# loading the json file 
with open('cve.json') as f:
    cve_data = json.load(f)['vulnerabilities']

#  to hold the CVE data
cve_database = {}

# synchronizing CVE data into the database
def synchronize_cve_data():
    global cve_database
    while True:
        with open('cve.json') as f:
            new_cve_data = json.load(f)['vulnerabilities']
        
        # Update the database with new CVE data
        updated_cve_data = clean_and_deduplicate_cve_data(new_cve_data)
        cve_database = {cve['cve']['id']: cve for cve in updated_cve_data}
        
        time.sleep(86400)  # Sleep for 24 hours (86400 seconds)

# Starting a thread for data synchronization
sync_thread = threading.Thread(target=synchronize_cve_data)
sync_thread.daemon = True
sync_thread.start()

#  Cleansing and De-dublication
def clean_and_deduplicate_cve_data(cve_data):
    cleaned_cve_data = []
    seen_cves = set()
    
    for cve in cve_data:
        cve_id = cve['cve']['id']
        # Checking for duplicate CVEs
        if cve_id not in seen_cves:
            # Validation and cleaning data as needed
            # removing unwanted fields or performing data type conversions
            cleaned_cve_data.append(cve)
            seen_cves.add(cve_id)
    
    return cleaned_cve_data
#  to pagination 
def paginate_data(data, page, per_page):
    start_index = (page - 1) * per_page
    end_index = start_index + per_page
    return data[start_index:end_index]

@app.route('/cves/list')
def cve_list():
    page = int(request.args.get('page', 1))
    per_page = int(request.args.get('per_page', 10))
    sort_by = request.args.get('sort_by', 'published')

    # Sorting CVE data by the specified field
    cve_data_sorted = sorted(cve_database.values(), key=lambda x: x['cve'][sort_by])

    # Performing server-side sorting for dates
    if sort_by in ['published', 'lastModified']:
        cve_data_sorted = sorted(cve_data_sorted, key=lambda x: x['cve'][sort_by], reverse=True)

    # Performing pagination
    cves_paginated = paginate_data(cve_data_sorted, page, per_page)
    total_records = len(cve_data_sorted)
    total_pages = total_records // per_page
    return render_template('cve_list.html', cves=cves_paginated, total_records=total_records, per_page=per_page,total_pages=total_pages)

#part-2 CVE details - second page

@app.route('/cves/<cve_id>')
def cve_details(cve_id):
    # Finding the CVE details by ID
    cve_details = cve_database.get(cve_id)
    if cve_details:
        if 'configurations' in cve_details['cve']:
            # Fetching 'configurations' data
            configurations_data = cve_details['cve']['configurations']
        else:
            configurations_data = None

        return render_template('cve_details.html', cve=cve_details, configurations=configurations_data)
    else:
        return "CVE not found", 404

@app.route('/')
def index():
    return redirect('/cves/list')

#execution
if __name__ == '__main__':
    app.run(debug=True)
